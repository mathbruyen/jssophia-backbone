/* --RESET from Eric Meyer http://meyerweb.com/eric/tools/css/reset/ */
html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
  margin: 0;
  padding: 0;
  border: 0;
  font-size: 100%;
  font: inherit;
  vertical-align: baseline;
}
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
  display: block;
}
body {
  line-height: 1;
}
ol, ul {
  list-style: none;
}
blockquote, q {
  quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
  content: '';
  content: none;
}

table {
  border-collapse: collapse;
  border-spacing: 0;
}

/* --BACKGROUND */
body {
  font-family: 'PT Sans', sans-serif;
  min-height: 740px;
  
  background: rgb(215, 215, 215);
  background: -webkit-gradient(radial, 50% 50%, 0, 50% 50%, 500, from(rgb(240, 240, 240)), to(rgb(190, 190, 190)));
  background: -webkit-radial-gradient(rgb(240, 240, 240), rgb(190, 190, 190));
  background:    -moz-radial-gradient(rgb(240, 240, 240), rgb(127, 129, 211));
  background:     -ms-radial-gradient(rgb(240, 240, 240), rgb(190, 190, 190));
  background:      -o-radial-gradient(rgb(240, 240, 240), rgb(190, 190, 190));
  background:         radial-gradient(rgb(240, 240, 240), rgb(190, 190, 190));    
}

/* --FALLBACK */
.fallback-message {
    font-family: sans-serif;
    line-height: 1.3;
    
    width: 780px;
    padding: 10px 10px 0;
    margin: 20px auto;

    border: 1px solid #E4C652;
    border-radius: 10px;
    background: #EEDC94;
}

.fallback-message p {
    margin-bottom: 10px;
}

.impress-supported .fallback-message {
    display: none;
}

/* --STEP */
.step {
    position: relative;
    width: 900px;
    padding: 40px;
    margin: 20px auto;

    -webkit-box-sizing: border-box;
    -moz-box-sizing:    border-box;
    -ms-box-sizing:     border-box;
    -o-box-sizing:      border-box;
    box-sizing:         border-box;

    font-family: 'PT Serif', georgia, serif;
    font-size: 48px;
    line-height: 1.5;
}

.impress-enabled .step {
    margin: 0;
    opacity: 0.3;

    -webkit-transition: opacity 1s;
    -moz-transition:    opacity 1s;
    -ms-transition:     opacity 1s;
    -o-transition:      opacity 1s;
    transition:         opacity 1s;
}

.impress-enabled .step.active { opacity: 1 }

/* --SLIDE */
.slide {
  display: block;

  width: 900px;
  height: 700px;
  padding: 40px 60px;

  background-color: white;
  border: 1px solid rgba(0, 0, 0, .3);
  border-radius: 10px;
  box-shadow: 0 2px 6px rgba(0, 0, 0, .1);

  color: rgb(102, 102, 102);
  text-shadow: 0 2px 2px rgba(0, 0, 0, .1);

  font-family: 'Open Sans', Arial, sans-serif;
  font-size: 26px;
  line-height: 36px;
  letter-spacing: -1px;
}
.invisible {
  background-color: transparent;
  border: 0;
  box-shadow: 0;
}
.small {
  font-size: 0.75em;
  overflow: hidden;
}

.overlay {
  position: absolute;
  top: 1em;
  left: 1em;
  right: 1em;
  bottom: 1em;
  z-index: 10000;
}
.overlay:before {
  content: "Hover for comments";
  position: absolute;
  font-size: 0.5em;
  top: 10px;
  right: 10px;
}
.overlay .overlaycontent {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  
  border-radius: 15px;
  
  background-color: rgba(186, 218, 85, 0);
  color: rgba(102, 102, 102, 0);
  text-shadow: 0 2px 2px rgba(0, 0, 0, 0);
  
  -moz-transition-property: background-color, color;
  -moz-transition-duration: 1s;
}
.overlay:hover .overlaycontent {
  background-color: rgba(186, 218, 85, 0.9);
  color: rgb(102, 102, 102);
  text-shadow: 0 2px 2px rgba(0, 0, 0, .1);
}

/* --SLIDESHOW */
b, strong { font-weight: bold }
i, em { font-style: italic }

a {
  color: inherit;
  text-decoration: none;
  padding: 0 0.1em;
  background: rgba(255,255,255,0.5);
  text-shadow: -1px -1px 2px rgba(100,100,100,0.9);
  border-radius: 0.2em;
  
  -webkit-transition: 0.5s;
  -moz-transition:    0.5s;
  -ms-transition:     0.5s;
  -o-transition:      0.5s;
  transition:         0.5s;
}

a:hover, a:focus {
  background: rgba(255,255,255,1);
  text-shadow: -1px -1px 2px rgba(100,100,100,0.5);
}

h1 {
  text-align: center;
  font-size: 2.5em;
  line-height: 1.5em;
}
h1 img {
  width: 80%;
}

h2 {
  text-align: center;
  font-size: 1.5em;
}

header {
  font-size: 0.8em;
}

ul {
  padding-left: 1em;
  list-style-type: disc;
}

.runbutton {
  font-size: 2em;
  position: absolute;
  right: 2em;
}

#ecosystem-developers img {
  width: 100%;
}

/* Sample app */
#todoapp {
  background: #fff;
  padding: 20px;
  margin-bottom: 40px;
  -webkit-box-shadow: rgba(0, 0, 0, 0.2) 0 2px 6px 0;
  -moz-box-shadow: rgba(0, 0, 0, 0.2) 0 2px 6px 0;
  -ms-box-shadow: rgba(0, 0, 0, 0.2) 0 2px 6px 0;
  -o-box-shadow: rgba(0, 0, 0, 0.2) 0 2px 6px 0;
  box-shadow: rgba(0, 0, 0, 0.2) 0 2px 6px 0;
  -webkit-border-radius: 0 0 5px 5px;
  -moz-border-radius: 0 0 5px 5px;
  -ms-border-radius: 0 0 5px 5px;
  -o-border-radius: 0 0 5px 5px;
  border-radius: 0 0 5px 5px;
}

#todoapp h1 {
  font-size: 36px;
  font-weight: bold;
  text-align: center;
  padding: 0 0 10px 0;
}

#todoapp input[type="text"] {
  width: 466px;
  font-size: 24px;
  font-family: inherit;
  line-height: 1.4em;
  border: 0;
  outline: none;
  padding: 6px;
  border: 1px solid #999999;
  -webkit-box-shadow: rgba(0, 0, 0, 0.2) 0 1px 2px 0 inset;
  -moz-box-shadow: rgba(0, 0, 0, 0.2) 0 1px 2px 0 inset;
  -ms-box-shadow: rgba(0, 0, 0, 0.2) 0 1px 2px 0 inset;
  -o-box-shadow: rgba(0, 0, 0, 0.2) 0 1px 2px 0 inset;
  box-shadow: rgba(0, 0, 0, 0.2) 0 1px 2px 0 inset;
}

#todoapp input::-webkit-input-placeholder {
  font-style: italic;
}

#todo-list {
  margin: 10px 0;
  padding: 0;
  list-style: none;
}

#todo-list li {
  padding: 18px 20px 18px 0;
  position: relative;
  font-size: 24px;
  border-bottom: 1px solid #cccccc;
}

#todo-list li:last-child {
  border-bottom: none;
}

#todo-list li.done label {
  color: #777777;
  text-decoration: line-through;
}

#todo-list .destroy {
  position: absolute;
  right: 5px;
  top: 20px;
  display: none;
  cursor: pointer;
  width: 20px;
  height: 20px;
  background: url(destroy.png) no-repeat;
}

#todo-list li:hover .destroy {
    display: block;
}

#todo-list .destroy:hover {
    background-position: 0 -20px;
}

#todo-list li.editing {
  border-bottom: none;
  margin-top: -1px;
  padding: 0;
}

#todo-list li.editing:last-child {
  margin-bottom: -1px;
}

#todo-list li.editing .edit {
  display: block;
  width: 444px;
  padding: 13px 15px 14px 20px;
  margin: 0;
}

#todo-list li.editing .view {
  display: none;
}

#todo-list li .view label {
  word-break: break-word;
}

#todo-list li .edit {
  display: none;
}

#todoapp footer {
  display: none;
  margin: 0 -20px -20px -20px;
  overflow: hidden;
  color: #555555;
  background: #f4fce8;
  border-top: 1px solid #ededed;
  padding: 0 20px;
  line-height: 37px;
  -webkit-border-radius: 0 0 5px 5px;
  -moz-border-radius: 0 0 5px 5px;
  -ms-border-radius: 0 0 5px 5px;
  -o-border-radius: 0 0 5px 5px;
  border-radius: 0 0 5px 5px;
}

/*
    We also make other steps visible and give them a pointer cursor using the
    `impress-on-` class.
*/
.impress-on-overview .step {
    opacity: 1;
    cursor: pointer;
}

.hint {
    /*
        We hide the hint until presentation is started and from browsers not supporting
        impress.js, as they will have a linear scrollable view ...
    */
    display: none;
    
    /*
        ... and give it some fixed position and nice styles.
    */
    position: fixed;
    left: 0;
    right: 0;
    bottom: 200px;
    
    background: rgba(0,0,0,0.5);
    color: #EEE;
    text-align: center;
    
    font-size: 50px;
    padding: 20px;
    
    z-index: 100;
    
    /*
        By default we don't want the hint to be visible, so we make it transparent ...
    */
    opacity: 0;
    
    /*
        ... and position it below the bottom of the screen (relative to it's fixed position)
    */
    -webkit-transform: translateY(400px);
    -moz-transform:    translateY(400px);
    -ms-transform:     translateY(400px);
    -o-transform:      translateY(400px);
    transform:         translateY(400px);

    /*
        Now let's imagine that the hint is visible and we want to fade it out and move out
        of the screen.
        
        So we define the transition on the opacity property with 1s duration and another
        transition on transform property delayed by 1s so it will happen after the fade out
        on opacity finished.
        
        This way user will not see the hint moving down.
    */
    -webkit-transition: opacity 1s, -webkit-transform 0.5s 1s;
    -moz-transition:    opacity 1s,    -moz-transform 0.5s 1s;
    -ms-transition:     opacity 1s,     -ms-transform 0.5s 1s;
    -o-transition:      opacity 1s,      -o-transform 0.5s 1s;
    transition:         opacity 1s,         transform 0.5s 1s;
}

/*
    Now we 'enable' the hint when presentation is initialized ...
*/
.impress-enabled .hint { display: block }

/*
    And as the last thing there is a workaround for quite strange bug.
    It happens a lot in Chrome. I don't remember if I've seen it in Firefox.
    
    Sometimes the element positioned in 3D (especially when it's moved back
    along Z axis) is not clickable, because it falls 'behind' the <body>
    element.
    
    To prevent this, I decided to make <body> non clickable by setting 
    pointer-events property to `none` value.
    Value if this property is inherited, so to make everything else clickable
    I bring it back on the #impress element.
    
    If you want to know more about `pointer-events` here are some docs:
    https://developer.mozilla.org/en/CSS/pointer-events
    
    There is one very important thing to notice about this workaround - it makes
    everything 'unclickable' except what's in #impress element.
    
    So use it wisely ... or don't use at all.
*/
.impress-enabled          { pointer-events: none }
.impress-enabled #impress { pointer-events: auto }
